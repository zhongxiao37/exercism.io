from dataclasses import dataclass
from itertools import count, takewhile


@dataclass
class PrimitiveTriple:
    """
    Implements a tree of primitive Pythagorean triples
    https://en.wikipedia.org/wiki/Tree_of_primitive_Pythagorean_triples
    """

    a: int
    b: int
    c: int

    MATRICES = (
        ((1, -2, 2), (2, -1, 2), (2, -2, 3)),
        ((1, 2, 2), (2, 1, 2), (2, 2, 3)),
        ((-1, 2, 2), (-2, 1, 2), (-2, 2, 3)),
    )

    def __init__(self, a, b, c):
        self.a, self.b = sorted((a, b))
        self.c = c

    def __iter__(self):
        yield self.a
        yield self.b
        yield self.c

    def __mul__(self, i):
        return PrimitiveTriple(self.a * i, self.b * i, self.c * i)

    def __matmul__(self, matrix):
        return PrimitiveTriple(
            *(sum(a * b for a, b in zip(self, row)) for row in matrix)
        )

    def walk_depth_first(self, predicate):
        if not predicate(self):
            return

        yield self
        for triple in self.children:
            yield from triple.walk_depth_first(predicate)

    @property
    def children(self):
        return (self @ matrix for matrix in self.MATRICES)

    @property
    def multiples(self):
        return (self * i for i in count(1))


def triplets_smaller_than(number):
    def smaller(x):
        return sum(x) <= number

    initial_triple = PrimitiveTriple(3, 4, 5)
    # All triples can be generated by multiplying a primitive triple by a positive integer
    # https://en.wikipedia.org/wiki/Pythagorean_triple#Generating_a_triple
    return (
        triple
        for primitive_triple in initial_triple.walk_depth_first(smaller)
        for triple in takewhile(smaller, primitive_triple.multiples)
    )


def triplets_with_sum(number):
    return {
        tuple(triple)
        for triple in triplets_smaller_than(number)
        if sum(triple) == number
    }